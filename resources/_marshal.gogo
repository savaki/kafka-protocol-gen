// Marshal {{ .Name }}; Versions: {{ .Versions }}
func (t {{ .Name }}) Marshal(e *encoder, version int) {
{{- range $i, $f := .Fields | forVersion .Versions }}
{{- if (isPartialOverlap $.Versions $f.Versions) }}
  if version >= {{ $f.Versions.From }}{{ if $f.Versions.UpToCurrent | not }} && version <= {{ $f.Versions.To }}{{ end }} {
{{- end }}
{{- if .Type | isPrimitiveArray }}
  e.Put{{ .Type | baseType | capitalize }}Array(t.{{ $f.Name }}) // {{ $f.Name }}
{{- end }}
{{- if .Type | isStructArray }}
  // {{ $f.Name }}
  if t.{{ $f.Name }} == nil {
    e.PutArrayLength(-1)
  } else {
  	length := len(t.{{ $f.Name }})
    e.PutArrayLength(length)
  	for i := 0 ; i < length ; i++ {
      t.{{ $f.Name }}[i].Marshal(e, version)
  	}
  }
{{- end }}
{{- if .Type | isArray | not }}
  e.Put{{ .Type | capitalize }}(t.{{ $f.Name}}) // {{ $f.Name }}
{{- end }}
{{- if (isPartialOverlap $.Versions $f.Versions) }}
  }
{{- end }}
{{- end }}
}
