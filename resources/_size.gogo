// size of {{ .Name }}; Versions: {{ .Versions }}
func (t {{ .Name }}) size(version int16) int32 {
  var sz int32
{{- range $i, $f := .Fields | forVersion .Versions }}
{{- if (isPartialOverlap $.Versions $f.Versions) }}
  if version >= {{ $f.Versions.From }}{{ if $f.Versions.UpToCurrent | not }} && version <= {{ $f.Versions.To }}{{ end }} {
{{- end }}
{{- if .Type | isPrimitiveArray }}
  sz += sz{{ $f.Type | baseType | capitalize }}Array(t.{{ $f.Name }}) // {{ $f.Name }}
{{- end }}
{{- if .Type | isStructArray }}
  sz += szArrayLength // {{ $f.Name }}
  for i := len(t.{{ $f.Name }}) - 1 ; i >= 0 ; i-- {
    sz += t.{{ $f.Name }}[i].size(version)
  }
{{- end }}
{{- if .Type | isBytes }}
  sz += szBytes(t.{{ $f.Name }}) // {{ $f.Name }}
{{- end }}
{{- if .Type | isString }}
  sz += szString(t.{{ $f.Name }}) // {{ $f.Name }}
{{- end }}
{{- if and (.Type | isArray | not) (.Type | isString | not) (.Type | isBytes | not) }}
  sz += sz{{ .Type | capitalize }} // {{ $f.Name }}
{{- end }}
{{- if (isPartialOverlap $.Versions $f.Versions) }}
  }
{{- end }}
{{- end }}
  return sz
}
