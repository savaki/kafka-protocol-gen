package {{ .Package }}

import (
  "{{ .Module }}/protocol"
{{- if gt (.Message.Fields | forVersion $.Version | len) 0 }}
  "{{ .Module }}/protocol/sizeof"
{{- end }}
)

type {{ .Message.Name }} struct {
{{- range .Message.Fields | forVersion $.Version }}
  {{ .Name }} {{ .Type }} {{ if .About }}// {{ .About }}{{ end }}
{{- end }}
}

func (t {{ .Message.Name }}) Size() int32 {
  var sz int32
{{- range $i, $f := .Message.Fields | forVersion $.Version }}
{{- if .Type | isArray }}
  sz += sizeof.Array(len(t.{{ $f.Name }}), func(i int) int32 { return t.{{ $f.Name }}[i].Size() })
{{- end }}
{{- if .Type | isArray | not }}
  sz += sizeof.{{ .Type | capitalize }}(t.{{ $f.Name}})
{{- end }}
{{- end }}
  return sz
}

func (t {{ .Message.Name }}) Marshal(encoder *protocol.Encoder) {
{{- range $i, $f := .Message.Fields | forVersion $.Version }}
{{- if .Type | isArray }}
  encoder.PutArray(len(t.{{ $f.Name }}), func(i int) { t.{{ $f.Name }}[i].Marshal(encoder) })
{{- end }}
{{- if .Type | isArray | not }}
  encoder.Put{{ .Type | capitalize }}(t.{{ $f.Name}})
{{- end }}
{{- end }}
}

func (t *{{ .Message.Name }}) Unmarshal(decoder *protocol.Decoder) error {
{{ template "_marshal.gogo" (toVersionFields $.Version .Message.Fields) }}
}
