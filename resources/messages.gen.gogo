// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package {{ .Package }}

import (
	"fmt"

  "{{ .Module }}/apikey"
	"{{ .Module }}/protocol"
	"{{ .Module }}/sizeof"
)

// apiVersion contains the negotiated versions for each api key
type apiVersion struct {
  {{- range .Messages }}
  {{- if .Name | isRequest }}
  {{ .Name | baseName }} int16
  {{- end }}
  {{- end }}
}

{{- range .Messages }}
{{- $message := . }}
{{- $versions := (validVersions . $.Last) }}

// {{ $message.Name }}; ApiKey: {{ $message.ApiKey}}, Versions: {{ $versions }}
type {{ $message.Name }} struct {
{{- range $message.Fields | forVersion $versions }}
{{- if .Type | isStructArray }}
  {{ .Name }} {{ .Type }}{{ $message.ApiKey }} //{{ if .About }} {{ .About }}{{ end }} Versions: {{ $versions }}
{{- end }}
{{- if .Type | isStructArray | not }}
  {{ .Name }} {{ .Type | goType }} //{{ if .About }} {{ .About }}{{ end }} Versions: {{ $versions }}
{{- end }}
{{- end }}
}

{{ template "_size.gogo" (toVersionFields $versions $message) }}
{{ template "_encode.gogo" (toVersionFields $versions $message) }}
{{ template "_decode.gogo" (toVersionFields $versions $message) }}

{{- range (findStructs $message.ApiKey $versions $message) }}

type {{ .Name }} struct {
{{- range .Fields | forVersion .Versions }}
{{- if .Type | isStructArray }}
  {{ .Name }} {{ .Type }}{{ $message.ApiKey }} //{{ if .About }} {{ .About }}{{ end }} Versions: {{ $versions }}
{{- end }}
{{- if .Type | isStructArray | not }}
  {{ .Name }} {{ .Type | goType }} //{{ if .About }} {{ .About }}{{ end }} Versions: {{ $versions }}
{{- end }}
{{- end }}
}

{{ template "_size.gogo" . }}
{{ template "_encode.gogo" . }}
{{ template "_decode.gogo" . }}
{{- end }}
{{- end }}

// negotiateApiVersions accepts the apiKeys from the broker and negotiates
// acceptable versions for each api based on the versions supported by
// this library.
func negotiateApiVersions(apiKeys []ApiVersionsResponseKey18) (apiVersion, error) {
  // Since this file is generated, there's no need to externalize the supported
  // versions elsewhere.  We can simply inline the values into the call to matchVersion
  var av apiVersion
  var err error
  for _, apiKey := range apiKeys {
    switch apiKey.ApiKey {
    {{- range .Messages }}
    {{- if .Name | isRequest }}
    case apikey.{{ .Name | baseName }}:
      av.{{ .Name | baseName }}, err = matchVersion(apiKey, {{ .ValidVersions.From }}, {{ .ValidVersions.To }})
      if err != nil {
        return apiVersion{}, err
      }
    {{- end }}
    {{- end }}
    }
  }
  return av, nil
}

// matchVersion determines which version of the api to use
func matchVersion(apiKey ApiVersionsResponseKey18, minVersion, maxVersion int16) (int16, error) {
  for version := apiKey.MaxVersion; version >= apiKey.MinVersion; version-- {
    if version := apiKey.MaxVersion; version >= minVersion && version <= maxVersion {
      return version, nil
    }
  }
  return 0, fmt.Errorf("unable to negotiate version for api key, %v", apiKey.ApiKey)
}
