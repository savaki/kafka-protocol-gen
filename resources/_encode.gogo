// encode {{ .Name }}; Versions: {{ .Versions }}
func (t {{ .Name }}) encode(e *protocol.Encoder, version int16) {
{{- range $i, $f := .Fields | forVersion .Versions }}
{{- if (isPartialOverlap $.Versions $f.Versions) }}
  if version >= {{ $f.Versions.From }}{{ if $f.Versions.UpToCurrent | not }} && version <= {{ $f.Versions.To }}{{ end }} {
{{- end }}
{{- if .Type | isPrimitiveArray }}
  e.Put{{ .Type | baseType | capitalize }}Array(t.{{ $f.Name }}) // {{ $f.Name }}
{{- end }}
{{- if .Type | isStructArray }}
  // {{ $f.Name }}
  len{{ $i }} := len(t.{{ $f.Name }})
  e.PutArrayLength(len{{ $i }})
  for i := 0 ; i < len{{ $i }} ; i++ {
    t.{{ $f.Name }}[i].encode(e, version)
  }
{{- end }}
{{- if .Type | isArray | not }}
  e.Put{{ .Type | capitalize }}(t.{{ $f.Name}}) // {{ $f.Name }}
{{- end }}
{{- if (isPartialOverlap $.Versions $f.Versions) }}
  }
{{- end }}
{{- end }}
}
